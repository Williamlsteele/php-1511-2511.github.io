V <- lapply(reg.list, vcov)
V
estm <- rep(c("intercept","slope"), length(b))
estm
subj <- rep(names(b), each=2)
subj
library(metafor)
b <- unlist(b)
V <- bldiag(V)
V
res2 <- rma.mv(b ~ estm-1, V, random = ~ estm | subj, struct="UN")
res2
summary(res2)
summary(res2)[1:10]
summary(res2)
summary(res2)[1]
summary(res2)[1,]
summary(res2)
reg.mix <- lme(distance ~ age, random = ~ age | Subject, data=Orthodont)
summary(reg.mix)
summary(reg.mix)
reg.mix2 <- lme(distance ~ age + Sex, random = ~ age | Subject, data=Orthodont)
summary(reg.mix2)
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=T)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
library(nlme)
head(Orthodont)
Orthodont$age <- Orthodont$age - 8
library(lattice)
xyplot( distance ~ age , data= Orthodont, groups=Subject, type='l', auto.key=list(space="top", columns=4,
title="Subject", cex.title=1), main="Distance")
library(nlme)
reg.list <- lmList(distance ~ age, data=Orthodont)
summary(reg.list)
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=T)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
V
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=T)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
library(nlme)
head(Orthodont)
Orthodont$age <- Orthodont$age - 8
library(lattice)
xyplot( distance ~ age , data= Orthodont, groups=Subject, type='l', auto.key=list(space="top", columns=4,
title="Subject", cex.title=1), main="Distance")
library(nlme)
reg.list <- lmList(distance ~ age, data=Orthodont)
summary(reg.list)
b <- lapply(reg.list, coef)
b
V <- lapply(reg.list, vcov)
V
estm <- rep(c("intercept","slope"), length(b))
estm
subj <- rep(names(b), each=2)
subj
library(metafor)
b <- unlist(b)
V <- bldiag(V)
b
library(metafor)
b <- unlist(b)
V <- bldiag(V)
b
library(metafor)
b <- unlist(b)
V <- bldiag(V)
library(RefManageR)
# library(knitcitations)
# library(rcrossref)
bib <- ReadBib("C:/Users/adam_/Dropbox (Personal)/Brown/Teaching/Brown Courses/PHP2514/bib.bib")
myopts <- BibOptions(bib.style = "authoryear", style="latex", first.inits=FALSE, max.names = 20)
bib["pmid22522099"]
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=F)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
model.full.ml <- update(model.full,REML=FALSE)
m1 <- update(model.intercepts, REML=F)
m2 <- update(model.full, REML=F)
anova(m1,m2)
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=F)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
library(knitr)
library(lattice)
library(lme4)
library(simr)
library(reshape2)
model <-              lm(Reaction ~ 1 + Days,data=sleepstudy)
models <-         lmList(Reaction ~ 1 + Days|Subject,data=sleepstudy)
model.slopes <-     lmer(Reaction ~ 1 + Days + (0 + Days|Subject),data=sleepstudy)
model.full <-       lmer(Reaction ~ 1+ Days + (1+ Days|Subject),data=sleepstudy)
model.full.ml <- update(model.full,REML=FALSE)
m1 <- update(model.intercepts, REML=F)
m2 <- update(model.full, REML=F)
anova(m1,m2)
library(knitr)
library(lattice)
library(lme4)
library(simr)
library(reshape2)
model <-              lm(Reaction ~ 1 + Days,data=sleepstudy)
models <-         lmList(Reaction ~ 1 + Days|Subject,data=sleepstudy)
model.slopes <-     lmer(Reaction ~ 1 + Days + (0 + Days|Subject),data=sleepstudy)
model.full <-       lmer(Reaction ~ 1+ Days + (1+ Days|Subject),data=sleepstudy)
model.full.ml <- update(model.full,REML=FALSE)
m1 <- update(model.intercepts, REML=F)
m2 <- update(model.full, REML=F)
anova(m1,m2)
library(knitr)
library(lattice)
library(lme4)
library(simr)
library(reshape2)
model <-              lm(Reaction ~ 1 + Days,data=sleepstudy)
models <-         lmList(Reaction ~ 1 + Days|Subject,data=sleepstudy)
model.intercept <- lmer(Reaction ~ 1+ Days + (1|Subject),data=sleepstudy)
model.slopes <-     lmer(Reaction ~ 1 + Days + (0 + Days|Subject),data=sleepstudy)
model.full <-       lmer(Reaction ~ 1+ Days + (1+ Days|Subject),data=sleepstudy)
m1 <- update(model.intercepts, REML=F)
m2 <- update(model.full, REML=F)
anova(m1,m2)
library(knitr)
library(lattice)
library(lme4)
library(simr)
library(reshape2)
model <-              lm(Reaction ~ 1 + Days,data=sleepstudy)
models <-         lmList(Reaction ~ 1 + Days|Subject,data=sleepstudy)
model.intercepts <- lmer(Reaction ~ 1+ Days + (1|Subject),data=sleepstudy)
model.slopes <-     lmer(Reaction ~ 1 + Days + (0 + Days|Subject),data=sleepstudy)
model.full <-       lmer(Reaction ~ 1+ Days + (1+ Days|Subject),data=sleepstudy)
m1 <- update(model.intercepts, REML=F)
m2 <- update(model.full, REML=F)
anova(m1,m2)
m1 <- update(model.slopes, REML=F)
m2 <- update(model.full, REML=F)
anova(m1,m2)
load('gpa.RData')
DT::datatable(gpa,
options=list(dom='tp',
scrollX=T,
autoWidth=T,
columnDefs = list(list(width = '200px', targets = 1),
list(width = '100px', targets = 3),
list(width = '50px', targets = c(0,2,5,7:9)))),
rownames=F,
class = 'nowrap|compact')
set.seed(1234)
gpa_lm = lm(gpa ~ occasion, data=gpa)
# sample_students = gpa %>% filter(student %in% sample(1:200, 10))
# occasion_sample = gpa$occasion[gpa$student %in% sample_students$student]
# gpa_sample = gpa$gpa[gpa$student %in% sample_students$student]
gpa %>%
modelr::add_predictions(gpa_lm, var='all') %>%
mutate(select = factor(student %in% sample(1:200, 10))) %>%
group_by(student, select) %>%
plot_ly %>%
add_lines(x=~occasion, y=~gpa, opacity=.35, color=~select, colors=rev(palettes$orange$complementary), showlegend=F) %>%
add_lines(x=~occasion, y=~all, color=I(palettes$stan_red$stan_red), opacity=.70) %>%
theme_plotly()
set.seed(1234)
library(tidyverse)
gpa_lm = lm(gpa ~ occasion, data=gpa)
# sample_students = gpa %>% filter(student %in% sample(1:200, 10))
# occasion_sample = gpa$occasion[gpa$student %in% sample_students$student]
# gpa_sample = gpa$gpa[gpa$student %in% sample_students$student]
gpa %>%
modelr::add_predictions(gpa_lm, var='all') %>%
mutate(select = factor(student %in% sample(1:200, 10))) %>%
group_by(student, select) %>%
plot_ly %>%
add_lines(x=~occasion, y=~gpa, opacity=.35, color=~select, colors=rev(palettes$orange$complementary), showlegend=F) %>%
add_lines(x=~occasion, y=~all, color=I(palettes$stan_red$stan_red), opacity=.70) %>%
theme_plotly()
library("plotly")
set.seed(1234)
library(tidyverse)
library(plotly)
gpa_lm = lm(gpa ~ occasion, data=gpa)
# sample_students = gpa %>% filter(student %in% sample(1:200, 10))
# occasion_sample = gpa$occasion[gpa$student %in% sample_students$student]
# gpa_sample = gpa$gpa[gpa$student %in% sample_students$student]
gpa %>%
modelr::add_predictions(gpa_lm, var='all') %>%
mutate(select = factor(student %in% sample(1:200, 10))) %>%
group_by(student, select) %>%
plot_ly %>%
add_lines(x=~occasion, y=~gpa, opacity=.35, color=~select, colors=rev(palettes$orange$complementary), showlegend=F) %>%
add_lines(x=~occasion, y=~all, color=I(palettes$stan_red$stan_red), opacity=.70) %>%
theme_plotly()
set.seed(1234)
library(tidyverse)
library(plotly)
library(ggplot2)
gpa_lm = lm(gpa ~ occasion, data=gpa)
# sample_students = gpa %>% filter(student %in% sample(1:200, 10))
# occasion_sample = gpa$occasion[gpa$student %in% sample_students$student]
# gpa_sample = gpa$gpa[gpa$student %in% sample_students$student]
gpa %>%
modelr::add_predictions(gpa_lm, var='all') %>%
mutate(select = factor(student %in% sample(1:200, 10))) %>%
group_by(student, select) %>%
plot_ly %>%
add_lines(x=~occasion, y=~gpa, opacity=.35, color=~select, colors=rev(palettes$orange$complementary), showlegend=F) %>%
add_lines(x=~occasion, y=~all, color=I(palettes$stan_red$stan_red), opacity=.70) %>%
theme_plotly()
install.packages("RColorBrewer")
set.seed(1234)
library(tidyverse)
library(plotly)
library(ggplot2)
library(RColorBrewer)
gpa_lm = lm(gpa ~ occasion, data=gpa)
# sample_students = gpa %>% filter(student %in% sample(1:200, 10))
# occasion_sample = gpa$occasion[gpa$student %in% sample_students$student]
# gpa_sample = gpa$gpa[gpa$student %in% sample_students$student]
gpa %>%
modelr::add_predictions(gpa_lm, var='all') %>%
mutate(select = factor(student %in% sample(1:200, 10))) %>%
group_by(student, select) %>%
plot_ly %>%
add_lines(x=~occasion, y=~gpa, opacity=.35, color=~select, colors=rev(palettes$orange$complementary), showlegend=F) %>%
add_lines(x=~occasion, y=~all, color=I(palettes$stan_red$stan_red), opacity=.70) %>%
theme_plotly()
package <- c("lazerhawk", "htmltools", "forcats", "pander")
install.packages(package)
install.packages(package)
devtools::install_github("m-clark/lazerhawk")
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=F)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
set.seed(1234)
library(tidyverse)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(lazerhawk); library(htmltools); library(forcats); library(lme4)
library(broom); library(pander); library(tidyverse); library(plotly); library(haven)
gpa_lm = lm(gpa ~ occasion, data=gpa)
# sample_students = gpa %>% filter(student %in% sample(1:200, 10))
# occasion_sample = gpa$occasion[gpa$student %in% sample_students$student]
# gpa_sample = gpa$gpa[gpa$student %in% sample_students$student]
gpa %>%
modelr::add_predictions(gpa_lm, var='all') %>%
mutate(select = factor(student %in% sample(1:200, 10))) %>%
group_by(student, select) %>%
plot_ly %>%
add_lines(x=~occasion, y=~gpa, opacity=.35, color=~select, colors=rev(palettes$orange$complementary), showlegend=F) %>%
add_lines(x=~occasion, y=~all, color=I(palettes$stan_red$stan_red), opacity=.70) %>%
theme_plotly()
gpa_lm = lm(gpa ~ occasion, data=gpa)
summary(gpa_lm)
pander(summary(gpa_lm), round=3)
gpa_lm_by_group = gpa %>%
split(.$student) %>%
map(~lm(gpa ~ occasion, data=.x)) %>%
map(coef) %>%
do.call(rbind, .) # some day bind_rows will work as advertised
coef_lm = coef(gpa_lm)
gpa_lm = lm(gpa ~ occasion, data=gpa)
#summary(gpa_lm)
pander(summary(gpa_lm), round=3)
gpa_lm_by_group = gpa %>%
split(.$student) %>%
map(~lm(gpa ~ occasion, data=.x)) %>%
map(coef) %>%
do.call(rbind, .) # some day bind_rows will work as advertised
coef_lm = coef(gpa_lm)
gpa_mixed = lmer(gpa ~ occasion + (1|student), data=gpa)
vcovs = tidy(VarCorr(gpa_mixed)) %>%
select(vcov)  # for icc later
pander(tidy(gpa_mixed, 'fixed') %>%
mutate_if(is.numeric, arm::fround, digits=3))
tidy(VarCorr(gpa_mixed)) %>%
select(-var1, -var2) %>%
rename(variance=vcov, sd=sdcor) %>%
mutate_if(is.numeric, arm::fround, digits=3) %>%
pander()
install.packages("arm")
gpa_mixed = lmer(gpa ~ occasion + (1|student), data=gpa)
vcovs = tidy(VarCorr(gpa_mixed)) %>%
select(vcov)  # for icc later
pander(tidy(gpa_mixed, 'fixed') %>%
mutate_if(is.numeric, arm::fround, digits=3))
tidy(VarCorr(gpa_mixed)) %>%
select(-var1, -var2) %>%
rename(variance=vcov, sd=sdcor) %>%
mutate_if(is.numeric, arm::fround, digits=3) %>%
pander()
gpa_lm = lm(gpa ~ occasion, data=gpa)
#summary(gpa_lm)
pander(summary(gpa_lm), round=3)
gpa_lm_by_group = gpa %>%
split(.$student) %>%
map(~lm(gpa ~ occasion, data=.x)) %>%
map(coef) %>%
do.call(rbind, .) # some day bind_rows will work as advertised
coef_lm = coef(gpa_lm)
install.packages("merTools")
merTools::plotREsim(merTools::REsim(gpa_mixed)) +
labs(x='Student', y='Value', title='Plot of Random Effects', subtitle='Interval estimates ') +
geom_hline(aes(yintercept=0), color='orange', alpha=.5) +
theme_trueMinimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_blank(),
strip.text.y = element_blank(),
panel.background = element_rect(fill='transparent', color=NA),   # apparently all ignored for reasons unknown
plot.background = element_rect(fill='transparent', color=NA),
strip.background =  element_rect(fill='transparent', color=NA))
gpa_mixed =  lmer(gpa ~ occasion + (1 + occasion|student), data=gpa)
pander(tidy(gpa_mixed, 'fixed', conf.int=T) %>% mutate_if(is.numeric, arm::fround, digits=3))
tidy(VarCorr(gpa_mixed)) %>%
slice(-3) %>%
select(-var2) %>%
rename(variance=vcov, sd=sdcor, re=var1) %>%
mutate_if(is.numeric, arm::fround, digits=3) %>%
mutate_all(function(x) ifelse(is.na(x), '', x)) %>%
data.frame %>%
pander()
gpa %>%
modelr::add_predictions(gpa_lm, var='lm') %>%
modelr::add_predictions(gpa_mixed, var='mixed') %>%
group_by(student) %>%
plot_ly %>%
add_lines(x=~occasion, y=~lm, opacity=1, color=I('#ff5500'), name='Standard\nRegression') %>%
add_lines(x=~occasion, y=~mixed, opacity=.2, color=I('#03b3ff'), name='Mixed\nModel') %>%
theme_plotly()
m1 <- lmer(gpa ~ occasion + (1|student), data=gpa, REML=F)
m2 <- lmer(gpa ~ occasion + (1 + occasion|student), data=gpa, REML=F)
anova(m1,m2)
merTools::plotREsim(merTools::REsim(gpa_mixed)) +
labs(x='Student', y='Value', title='Plot of Random Effects', subtitle='Interval estimates ') +
geom_hline(aes(yintercept=0), color='orange', alpha=.5) +
theme_trueMinimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_blank(),
strip.text.y = element_blank(),
panel.background = element_rect(fill='transparent', color=NA),   # apparently all ignored for reasons unknown
plot.background = element_rect(fill='transparent', color=NA),
strip.background =  element_rect(fill='transparent', color=NA))
predict_with_re = predict(gpa_mixed)
data_frame(student = as.numeric(gpa$student),
lm = predict_lm,
`lmer no re`=predict_no_re,
`lmer with re`=predict_with_re) %>%
round(2) %>%
DT::datatable(rownames=F, width=500, options=list(dom='pt'))
predict_no_re = predict(gpa_mixed, re.form=NA)
predict_lm = predict(gpa_lm)
data_frame(student = as.numeric(gpa$student),
lm = predict_lm,
`lmer no re`=predict_no_re) %>%
round(2) %>%
DT::datatable(rownames=F, width=500, options=list(dom='pt'))
predict_with_re = predict(gpa_mixed)
data_frame(student = as.numeric(gpa$student),
lm = predict_lm,
`lmer no re`=predict_no_re,
`lmer with re`=predict_with_re) %>%
round(2) %>%
DT::datatable(rownames=F, width=500, options=list(dom='pt'))
gpa_mixed1 <- lmer(gpa ~ occasion + (1|student), data=gpa)
gpa_mixed2 <- lmer(gpa ~ occasion + (1 + occasion|student), data=gpa)
predict_with_re1 = predict(gpa_mixed1)
predict_with_re2 = predict(gpa_mixed2)
data_frame(student = as.numeric(gpa$student),
lm = predict_lm,
`Random Int`=predict_with_re1,
`Random Int-Slope`=predict_with_re2) %>%
round(2) %>%
DT::datatable(rownames=F, width=500, options=list(dom='pt'))
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=F)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
library(ggplot2)
library(tidyverse)
library(broom)
library(modelr)
library(tidyr)
data_bootstrap %>%
head()
truth <- function(x){
2.34 + 2.68*x - 3.42*x^2
}
noise <- function(x){
rnorm(length(x), sd=0.1)
}
set.seed(124)
data <- data_frame(
x = runif(n=100, min=0, max = 1),
y = truth(x) + noise(x)
)
data %>% head()
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=F)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
data %>%
DT::datatable()
library(knitr)
opts_chunk$set(error = TRUE)
opts_chunk$set(warning=FALSE)
opts_chunk$set(message=FALSE)
opts_chunk$set(results="hold")
opts_chunk$set(cache=F)
opts_chunk$set(  tidy=F,size="small")
opts_chunk$set(tidy.opts=list(width.cutoff=60))
options(digits = 3, scipen = 3)
library(ggplot2)
library(tidyr)
library(broom)
library(tidyverse)
truth <- function(x){
2.34 + 2.68*x - 3.42*x^2
}
noise <- function(x){
rnorm(length(x), sd-0.1)
}
set.seed(124)
data <- data_frame(
x <- runif(n=100, min=0, max = 1)
y <- truth(x) + noise(x)
)
set.seed(124)
data <- data_frame(
x <- runif(n=100, min=0, max = 1),
y <- truth(x) + noise(x)
)
set.seed(124)
data <- data_frame(
x = runif(n=100, min=0, max = 1),
y = truth(x) + noise(x)
)
truth <- function(x){
2.34 + 2.68*x - 3.42*x^2
}
noise <- function(x){
rnorm(length(x), sd=0.1)
}
set.seed(124)
data <- data_frame(
x = runif(n=100, min=0, max = 1),
y = truth(x) + noise(x)
)
data %>%
DT::datatable()
ggplot(df_regression, aes(x = x, y = y)) + geom_smoth()
ggplot(data, aes(x = x, y = y)) + geom_smoth()
ggplot(data, aes(x = x, y = y)) + geom_smo0th()
ggplot(data, aes(x = x, y = y)) + geom_smooth()
ggplot(data, aes(x = x, y = y)) +
geom_smooth(alpha=0.7) +
geom_point(alpha = 0.6)
data_bootstrap <-
data %>%
modelr::bootstrap(10000)
data_bootstrap %>%
DT::datatable()
??seq_range
